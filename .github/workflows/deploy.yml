name: Deploy to Vercel

on:
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight (check required secrets)
        run: |
          [ -n "$VERCEL_TOKEN" ] || { echo "❌ VERCEL_TOKEN missing"; exit 1; }
          [ -n "$VERCEL_ORG_ID" ] || { echo "❌ VERCEL_ORG_ID missing"; exit 1; }
          [ -n "$VERCEL_PROJECT_ID" ] || { echo "❌ VERCEL_PROJECT_ID missing"; exit 1; }
          echo "✅ All required secrets are present."

      - name: Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      # Activate pnpm from package.json's "packageManager"
      - name: Enable & Prepare PNPM
        shell: bash
        run: |
          set -e
          corepack enable
          # read version from package.json (fallback to 9.0.0 if jq missing)
          if command -v jq >/dev/null 2>&1; then
            VER=$(jq -r '.packageManager' package.json | cut -d@ -f2)
          else
            VER=9.0.0
          fi
          echo "Activating pnpm@$VER via Corepack"
          corepack prepare pnpm@$VER --activate
          pnpm -v

      - name: Cache PNPM store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpmstore-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpmstore-

      - name: Install deps (workspace)
        run: pnpm i -w --frozen-lockfile

      - name: Show Vercel CLI version (debug)
        run: npx vercel --version

      - name: Vercel Pull (production)
        run: npx vercel pull --yes --environment=production --token="$VERCEL_TOKEN"
        working-directory: apps/web

      - name: Vercel Build
        run: npx vercel build --token="$VERCEL_TOKEN"
        working-directory: apps/web

      # Add --prod to ship main → production
      - name: Vercel Deploy (prebuilt preview)
        run: npx vercel deploy --prebuilt --token="$VERCEL_TOKEN"
        working-directory: apps/web
